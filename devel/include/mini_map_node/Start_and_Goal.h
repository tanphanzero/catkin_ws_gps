// Generated by gencpp from file mini_map_node/Start_and_Goal.msg
// DO NOT EDIT!


#ifndef MINI_MAP_NODE_MESSAGE_START_AND_GOAL_H
#define MINI_MAP_NODE_MESSAGE_START_AND_GOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mini_map_node
{
template <class ContainerAllocator>
struct Start_and_Goal_
{
  typedef Start_and_Goal_<ContainerAllocator> Type;

  Start_and_Goal_()
    : robot_x(0.0)
    , robot_y(0.0)
    , clicked_x(0.0)
    , clicked_y(0.0)  {
    }
  Start_and_Goal_(const ContainerAllocator& _alloc)
    : robot_x(0.0)
    , robot_y(0.0)
    , clicked_x(0.0)
    , clicked_y(0.0)  {
  (void)_alloc;
    }



   typedef double _robot_x_type;
  _robot_x_type robot_x;

   typedef double _robot_y_type;
  _robot_y_type robot_y;

   typedef double _clicked_x_type;
  _clicked_x_type clicked_x;

   typedef double _clicked_y_type;
  _clicked_y_type clicked_y;





  typedef boost::shared_ptr< ::mini_map_node::Start_and_Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mini_map_node::Start_and_Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Start_and_Goal_

typedef ::mini_map_node::Start_and_Goal_<std::allocator<void> > Start_and_Goal;

typedef boost::shared_ptr< ::mini_map_node::Start_and_Goal > Start_and_GoalPtr;
typedef boost::shared_ptr< ::mini_map_node::Start_and_Goal const> Start_and_GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mini_map_node::Start_and_Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mini_map_node::Start_and_Goal_<ContainerAllocator1> & lhs, const ::mini_map_node::Start_and_Goal_<ContainerAllocator2> & rhs)
{
  return lhs.robot_x == rhs.robot_x &&
    lhs.robot_y == rhs.robot_y &&
    lhs.clicked_x == rhs.clicked_x &&
    lhs.clicked_y == rhs.clicked_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mini_map_node::Start_and_Goal_<ContainerAllocator1> & lhs, const ::mini_map_node::Start_and_Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mini_map_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mini_map_node::Start_and_Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mini_map_node::Start_and_Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mini_map_node::Start_and_Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abd8c4caffbcef7e1dc7782b0e0d4428";
  }

  static const char* value(const ::mini_map_node::Start_and_Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabd8c4caffbcef7eULL;
  static const uint64_t static_value2 = 0x1dc7782b0e0d4428ULL;
};

template<class ContainerAllocator>
struct DataType< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mini_map_node/Start_and_Goal";
  }

  static const char* value(const ::mini_map_node::Start_and_Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 robot_x\n"
"float64 robot_y\n"
"float64 clicked_x\n"
"float64 clicked_y\n"
;
  }

  static const char* value(const ::mini_map_node::Start_and_Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_x);
      stream.next(m.robot_y);
      stream.next(m.clicked_x);
      stream.next(m.clicked_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Start_and_Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mini_map_node::Start_and_Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mini_map_node::Start_and_Goal_<ContainerAllocator>& v)
  {
    s << indent << "robot_x: ";
    Printer<double>::stream(s, indent + "  ", v.robot_x);
    s << indent << "robot_y: ";
    Printer<double>::stream(s, indent + "  ", v.robot_y);
    s << indent << "clicked_x: ";
    Printer<double>::stream(s, indent + "  ", v.clicked_x);
    s << indent << "clicked_y: ";
    Printer<double>::stream(s, indent + "  ", v.clicked_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINI_MAP_NODE_MESSAGE_START_AND_GOAL_H
